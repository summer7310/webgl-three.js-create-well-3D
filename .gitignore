<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - orbit controls</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				color: black;
				font-family:Monospace;
				font-size:35px;
				text-align:center;
				font-weight: bold;

				background-color: black;
				margin: 0px;
				overflow: hidden;
			}
			#info {
				color:yellow;
				position: absolute;
				top: 10px; width: 50%;
				padding: 5px;

			}
			a {
				color: blue;
			}
		</style>
	</head>
	<body>
		<div class="info">		
		</div>
		<div id="container"></div>
		<script src="../build/three.min.js"></script>
		<script src="js/controls/OrbitControls.js"></script>	
		<script>
	var container,camera,controls,scene,renderer;
		init();
		render();	
	function init()
	{
		// Grab our container div
        var container = document.getElementById("container");
 		// Put in a camera
        camera = new THREE.PerspectiveCamera( 55, container.offsetWidth / container.offsetHeight, 1, 4000 );
        camera.position.set( 0, 10, 0 );
        camera.rotation.x = Math.PI / 12;
        //camera.lookAt(root.position);	
		
	/*	// Set up the FP controls
		var control = new THREE.FirstPersonControls( this.camera );
		control.movementSpeed = 13;
		control.lookSpeed = 0.07;
		control.noFly = true;
		control.lookVertical = true;	
		var clock = new THREE.Clock();
		control.update( clock.getDelta() );
		*/
		//控制
        controls = new THREE.OrbitControls( camera );
	    controls.addEventListener( 'change', render );
	    
        // Create the Three.js renderer, add it to our div
	    renderer = new THREE.WebGLRenderer( { antialias: true } );
	    renderer.setSize(container.offsetWidth, container.offsetHeight);
	    container.appendChild( renderer.domElement );

	    scene = new THREE.Scene();
        // Create a directional light to show off the object
        /*
		light = new THREE.DirectionalLight( 0xffffff );
		light.position.set( 0, 0, 0 );
		scene.add( light );
		light = new THREE.DirectionalLight( 0x002288 );
		light.position.set( -1, -1, -1 );
		scene.add( light );
		light = new THREE.AmbientLight( 0xFFFF00 );
		scene.add( light );
		*/
		//添加光线
		var light = new THREE.PointLight( 0xffffff, 1, 200);
		light.position.set(0, 20, 20);
		this.scene.add(light);

		light = new THREE.PointLight( 0xffffff, 1, 200);
		light.position.set(0, 0, 0);
		this.scene.add(light);

		var amb = new THREE.AmbientLight( 0x808080, 1);
		this.scene.add(amb);
        // Create a shaded, texture-mapped cube and add it to the scene
        // First, create the texture map

        //添加工井剖面墙
		var geometry = new THREE.CubeGeometry(1, 40, 40);
        var mapUrl = "../images/456.png";
        var map = THREE.ImageUtils.loadTexture(mapUrl);
        map.wrapS = map.wrapT = THREE.RepeatWrapping;
    	map.repeat.set(1,1);     
        var material = new THREE.MeshPhongMaterial({ map: map });
        var mesh = new THREE.Mesh(geometry, material);
		mesh.position.set(-20, 20, 0);
		scene.add( mesh );

		var geometry = new THREE.CubeGeometry(1, 40, 40);
		var material = new THREE.MeshLambertMaterial({ map : map});
		var cube = new THREE.Mesh(geometry, material);
		cube.position.set(20, 20, 0);
		scene.add( cube );

		var geometry = new THREE.CubeGeometry(40, 40, 1);
		var material = new THREE.MeshLambertMaterial({ map : map});
		var cube = new THREE.Mesh(geometry, material);
		cube.position.set(0, 20, -20);
		scene.add( cube );

		var geometry = new THREE.CubeGeometry(40, 40, 1);
		var material = new THREE.MeshLambertMaterial({ map : map});
		var cube = new THREE.Mesh(geometry, material);
		cube.position.set(0, 20, 20);
		scene.add( cube );
		//添加管孔

		var geometry = new THREE.CubeGeometry(0.5, 2, 2);
		var map = THREE.ImageUtils.loadTexture('../images/12.png');
    	map.wrapS = map.wrapT = THREE.RepeatWrapping;
   		map.repeat.set(1,1);
		var material = new THREE.MeshLambertMaterial({ map : map});
		var mesh = new THREE.Mesh(geometry, material);
		mesh.position.set(-19.9, 10, 0);
		scene.add(mesh);


		var geometry = new THREE.CubeGeometry(2, 2, 2);
		var material = new THREE.MeshLambertMaterial({ map : map});
		var mesh = new THREE.Mesh(geometry, material);
		mesh.position.set(-19.9, 13, 0);
		scene.add(mesh);


		var geometry = new THREE.CubeGeometry(2, 2, 2);
		var material = new THREE.MeshLambertMaterial({ map : map});
		var mesh = new THREE.Mesh(geometry, material);
		mesh.position.set(10, 10, 0);
		scene.add(mesh);

		var x,y,z;
		x = 13;
		y = 10;
		z = 0;
		var geometry = new THREE.CubeGeometry(1, 1, 1);
		var material = new THREE.MeshLambertMaterial({ map : map});
		var mesh = new THREE.Mesh(geometry, material);
		mesh.position.set(x, y, z);
		scene.add(mesh);

		geometry = new THREE.PlaneGeometry(2,2,2,2);
		var map = THREE.ImageUtils.loadTexture('../images/12.png');
		map.repeat.set(1,1);
		map.wrapS = map.wrapS = THREE.MirroredRepeatWrapping;
		material = new THREE.MeshLambertMaterial({ambient:0xffffff,map : map});
		scene.add(mesh);			
		//添加工井地面
		geometry = new THREE.PlaneGeometry(66, 66, 66, 66);
		var map = THREE.ImageUtils.loadTexture('../images/Mercury.jpg');
    	map.repeat.set(1,1);
  	 	map.wrapS = map.wrapT = THREE.MirroredRepeatWrapping;
   		material = new THREE.MeshLambertMaterial({ambient:0xffffff, map : map});
		cube = new THREE.Mesh(geometry, material);
		cube.rotation.x = -Math.PI / 2;
		cube.position.y = -.01;
		scene.add( cube );
		//添加工井上面
		geometry = new THREE.PlaneGeometry(0, 0, 0, 0);
		var map = THREE.ImageUtils.loadTexture('../images/ball_texture.jpg');
    	map.repeat.set(1,1);
  	 	map.wrapS = map.wrapT = THREE.MirroredRepeatWrapping;
   		material = new THREE.MeshLambertMaterial({ambient:0xffffff, map : map});
		cube = new THREE.Mesh(geometry, material);
		cube.rotation.x = -Math.PI / 2;
		cube.position.y = 40;
		scene.add( cube );

        window.addEventListener( 'resize', onWindowResize, false );
	}

		function update(){

		}
		function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
				render();
			}
		function render() {
				renderer.render( scene, camera );
				
			}	
	</script>
</head>
<body init="init();" style="">
	    <div id="container" style="width:95%; height:80%; position:absolute;"></div>
	<div id="prompt" style="width:95%; height:6%; bottom:0; text-align:center; position:absolute;">工井三维剖面显示</div>
</body>
</html>
